/* Generated By:JJTree&JavaCC: Do not edit this line. ParserConstants.java */
package org.nfunk.jep;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface ParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int INTEGER_LITERAL = 7;
  /** RegularExpression Id. */
  int DECIMAL_LITERAL = 8;
  /** RegularExpression Id. */
  int STRING_LITERAL = 9;
  /** RegularExpression Id. */
  int DEFAULT_FP_LITERAL = 10;
  /** RegularExpression Id. */
  int DEF_EXPONENT = 11;
  /** RegularExpression Id. */
  int DEFAULT_DEC_SEPARATOR = 12;
  /** RegularExpression Id. */
  int ALT_FP_LITERAL = 13;
  /** RegularExpression Id. */
  int ALT_EXPONENT = 14;
  /** RegularExpression Id. */
  int ALT_DEC_SEPARATOR = 15;
  /** RegularExpression Id. */
  int IF = 16;
  /** RegularExpression Id. */
  int THEN = 17;
  /** RegularExpression Id. */
  int ELSE = 18;
  /** RegularExpression Id. */
  int RETURN = 19;
  /** RegularExpression Id. */
  int INDENTIFIER1 = 20;
  /** RegularExpression Id. */
  int LETTER1 = 21;
  /** RegularExpression Id. */
  int DIGIT1 = 22;
  /** RegularExpression Id. */
  int INDENTIFIER2 = 23;
  /** RegularExpression Id. */
  int LETTER2 = 24;
  /** RegularExpression Id. */
  int DIGIT2 = 25;
  /** RegularExpression Id. */
  int ASSIGN = 26;
  /** RegularExpression Id. */
  int SEMI = 27;
  /** RegularExpression Id. */
  int COMMA = 28;
  /** RegularExpression Id. */
  int GT = 29;
  /** RegularExpression Id. */
  int LT = 30;
  /** RegularExpression Id. */
  int EQ = 31;
  /** RegularExpression Id. */
  int LE = 32;
  /** RegularExpression Id. */
  int GE = 33;
  /** RegularExpression Id. */
  int NE = 34;
  /** RegularExpression Id. */
  int AND = 35;
  /** RegularExpression Id. */
  int OR = 36;
  /** RegularExpression Id. */
  int PLUS = 37;
  /** RegularExpression Id. */
  int MINUS = 38;
  /** RegularExpression Id. */
  int MUL = 39;
  /** RegularExpression Id. */
  int DOT = 40;
  /** RegularExpression Id. */
  int DIV = 41;
  /** RegularExpression Id. */
  int MOD = 42;
  /** RegularExpression Id. */
  int NOT = 43;
  /** RegularExpression Id. */
  int POWER = 44;
  /** RegularExpression Id. */
  int CROSS = 45;
  /** RegularExpression Id. */
  int LSQ = 46;
  /** RegularExpression Id. */
  int RSQ = 47;
  /** RegularExpression Id. */
  int LRND = 48;
  /** RegularExpression Id. */
  int RRND = 49;
  /** RegularExpression Id. */
  int LCRV = 50;
  /** RegularExpression Id. */
  int RCRV = 51;
  /** RegularExpression Id. */
  int COLON = 52;

  /** Lexical state. */
  int ALT_SEPARATORS = 0;
  /** Lexical state. */
  int NO_DOT_IN_IDENTIFIERS = 1;
  /** Lexical state. */
  int DEFAULT = 2;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "<token of kind 5>",
    "<token of kind 6>",
    "<INTEGER_LITERAL>",
    "<DECIMAL_LITERAL>",
    "<STRING_LITERAL>",
    "<DEFAULT_FP_LITERAL>",
    "<DEF_EXPONENT>",
    "<DEFAULT_DEC_SEPARATOR>",
    "<ALT_FP_LITERAL>",
    "<ALT_EXPONENT>",
    "<ALT_DEC_SEPARATOR>",
    "\"if\"",
    "\"then\"",
    "\"else\"",
    "\"return\"",
    "<INDENTIFIER1>",
    "<LETTER1>",
    "<DIGIT1>",
    "<INDENTIFIER2>",
    "<LETTER2>",
    "<DIGIT2>",
    "\"=\"",
    "\";\"",
    "\",\"",
    "\">\"",
    "\"<\"",
    "\"==\"",
    "\"<=\"",
    "\">=\"",
    "\"!=\"",
    "\"&&\"",
    "\"||\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\".\"",
    "\"/\"",
    "\"%\"",
    "\"!\"",
    "\"^\"",
    "\"^^\"",
    "\"[\"",
    "\"]\"",
    "\"(\"",
    "\")\"",
    "\"{\"",
    "\"}\"",
    "\":\"",
  };

}
