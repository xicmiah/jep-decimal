<!--
=============================================================================

  build.xml (ant build script)

  JEP - Java Expression Parser
  http://www.singularsys.com/jep

  Note: You do not need to compile JEP unless you make changes to the source
  code.

  Setting up your system to compile JEP:
  - Get JavaCC 3.2 from https://javacc.dev.java.net/. Using JavaCC 4.0 or
    later will likely result in errors.
    
  - Set the JAVACCHOME environment variable to the location of the
    library directory of JavaCC (e.g. C:\apps\javacc\bin\lib)

=============================================================================
-->

<project name="JEP-2.4.1" default="compile" basedir=".">

    <property name="jep-ver" value="2.4.1"/>
    <property name="ext-ver" value="1.1.1"/>
    <!-- library locations -->
    <property environment="env"/>
    <property name="javacchome" value="${env.JAVACCHOME}"/>
    <!-- set global properties for this build -->
    <property name="src" value="src/java"/>
    <property name="bin" value="bin"/>
    <property name="build.base" value="build"/>
    <property name="build" value="${build.base}/out"/>
    <property name="dist" value="dist"/>
    <property name="doc" value="doc"/>
    <property name="lib" value="lib"/>
    <property name="dist.temp" value="disttemp"/>
    
    <property name="test.src" value="src/test"/>
    <property name="test.build" value="${build.base}/test"/>
    <property name="test.report" value="${build.base}/test-report"/>

    <property name="jep-jar" value="jep-${jep-ver}.jar"/>
    <property name="ext-jar" value="ext-${ext-ver}.jar"/>

    <property name="jep-ext-gpl" value="jep-${jep-ver}-ext-${ext-ver}-gpl"/>

    <path id="classpath">
        <pathelement location="${lib}/Jama-1.0.2.jar"/>
    </path>
    <path id="test-classpath">
        <path refid="classpath"/>
        <pathelement location="${lib}/junit-4.6.jar"/>
        <pathelement location="${build}"/>
    </path>
    <taskdef name="jjtree"
             classname="org.apache.tools.ant.taskdefs.optional.javacc.JJTree"/>

    <taskdef name="javacc"
             classname="org.apache.tools.ant.taskdefs.optional.javacc.JavaCC"/>

    <!--======================================================================-->
    <!-- INIT -->
    <target name="init">
        <!-- Create the time stamp -->
        <tstamp/>
        <!-- Echo environment variables -->
        <echo message="JAVACCHOME = ${javacchome}"/>
    </target>

    <!--======================================================================-->
    <!-- JJTREE -->
    <target name="jjtree" depends="init">
        <jjtree
                target="${src}/org/nfunk/jep/Parser.jjt"
                outputdirectory="${src}/org/nfunk/jep/"
                javacchome="${javacchome}"
                />
    </target>

    <!--======================================================================-->
    <!-- JAVACC -->
    <target name="javacc" depends="jjtree">
        <delete>
            <fileset dir="${src}/org/nfunk/jep">
                <filename name="TokenMgrError.java"/>
                <filename name="ParseException.java"/>
                <filename name="Token.java"/>
                <filename name="JavaCharStream.java"/>
            </fileset>
        </delete>
        <javacc
                target="${src}/org/nfunk/jep/Parser.jj"
                outputdirectory="${src}/org/nfunk/jep/"
                javacchome="${javacchome}"
                />
    </target>

    <!--======================================================================-->
    <!-- JJDOC -->
    <target name="jjdoc" depends="javacc">
        <mkdir dir="${doc}/grammar"/>
        <jjdoc
                target="${src}/org/nfunk/jep/Parser.jj"
                outputfile="${doc}/grammar/grammar.html"
                javacchome="${javacchome}"
                />
        <jjdoc
                target="${src}/org/nfunk/jep/Parser.jj"
                outputfile="${doc}/grammar/grammar.txt"
                text="true"
                javacchome="${javacchome}"
                />
    </target>


    <!--======================================================================-->
    <!-- COMPILE -->

    <!-- Compiles with or without compatibility ensurance-->
    <target name="compile" depends="javacc">

        <!-- Create the build directory -->
        <mkdir dir="${build}"/>

        <!-- Compile the java code from ${src} into ${build} -->
        <javac srcdir="${src}"
               destdir="${build}"
               classpathref="classpath"
               deprecation="on"
               source="1.5"
               target="1.5"/>
    </target>

    <!-- Compiles with or without compatibility ensurance-->
    <target name="compile-tests" depends="compile">

        <!-- Create the build directory -->
        <mkdir dir="${build}"/>

        <!-- Compile the java code from ${src} into ${build} -->
        <javac srcdir="${src}"
               destdir="${build}"
               classpathref="test-classpath"
               deprecation="on"
               source="1.5"
               target="1.5"/>
    </target>


    <!--======================================================================-->
    <!-- JAVADOC -->
    <target name="javadoc" depends="init">
        <delete dir="${doc}/javadoc"/>
        <mkdir dir="${doc}/javadoc"/>
        <javadoc packagenames="org.nfunk.jep.*,org.lsmp.*"
                 classpathref="classpath"
                 sourcepath="${src}"
                 destdir="${doc}/javadoc"
                 windowtitle="JEP API"
                 breakiterator="yes"
                 source="1.5">
            <bottom>
                <![CDATA[<A HREF="http://www.singularsys.com/jep" TARGET="_blank">http://www.singularsys.com/jep</A> Copyright &#169; 2007 Singular Systems]]></bottom>
        </javadoc>
    </target>


    <!--======================================================================-->
    <!-- JAR -->
    <target name="jar" depends="compile">
        <!-- Create the distribution directory -->
        <mkdir dir="${dist}"/>

        <!-- JEP jar without examples or testing classes-->
        <jar jarfile="${dist}/${jep-jar}"
             basedir="${build}"
             includes="org/nfunk/jep/**"/>

        <!-- Extensions jar without examples or testing classes -->
        <jar jarfile="${dist}/${ext-jar}"
             basedir="${build}"
             includes="org/lsmp/djep/**"/>

        <!-- JEP Examples jar for web site -->
        <!-- TODO: DJEP examples as well? -->
        <jar jarfile="${dist}/jep-${jep-ver}-withexamples.jar"
             basedir="${build}"
             includes="org/nfunk/jep/**,org/nfunk/jepexamples/**"/>
    </target>


    <!--======================================================================-->
    <!-- RUN TESTS -->

    <target name="runtests">

        <junit printsummary="yes" haltonfailure="yes">
            <classpath>
                <path refid="test-classpath"/>
            </classpath>

            <batchtest fork="yes" todir="${test.report}">
                <formatter type="html"/>
                <fileset dir="${test.build}">
                    <include name="**/*Test*.java"/>
                    <exclude name="**/AllTests.java"/>
                </fileset>
            </batchtest>
        </junit>
    </target>

    <!--======================================================================-->
    <!-- CLEAN -->
    <target name="clean">
        <!-- Delete the ${build} and ${dist} directory trees -->
        <delete dir="${build.base}"/>
        <delete dir="${dist}"/>
        <delete dir="${doc}/grammar"/>
    </target>

    <!--======================================================================-->
    <!-- DIST -->
    <!-- Creates temporary directories to which files are copied.
Then zip files are made from these directories -->
    <target name="dist" depends="jar,javadoc">
        <!-- Create a temp dir for contents of packages-->
        <delete dir="${dist.temp}"/>
        <mkdir dir="${dist.temp}/${jep-ext-gpl}"/>

        <!-- Copy src files -->
        <!-- define filterset -->
        <filterset id="sourcefilters">
            <filter token="header" value=" JEP ${jep-ver}, Extensions ${ext-ver}"/>
            <filter token="date" value="      ${TODAY}"/>
            <filter token="copyright" value="      (c) Copyright 2007, Nathan Funk and Richard Morris"/>
            <filter token="license" value="      See LICENSE-*.txt for license information."/>
        </filterset>
        <!-- copy source files with filter to disttemp -->
        <copy todir="${dist.temp}">
            <fileset dir="."
                     includes="${src}/**"/>
            <filterset refid="sourcefilters"/>
        </copy>
        <!-- copy common files -->
        <copy todir="${dist.temp}" enablemultiplemappings="true">
            <fileset dir="."
                     includes="
					 ${doc}/**,
					 ${bin}/**,
					 ${lib}/**,
					 ${dist}/${jep-jar},
					 build.xml,
					 CHANGES.txt,
					 COPYRIGHT.txt,
					 README.html"/>
            <compositemapper>
                <globmapper from="*" to="${jep-ext-gpl}/*"/>
            </compositemapper>
        </copy>

        <!-- JEP+EXT GPL ================================================ -->
        <copy todir="${dist.temp}/${jep-ext-gpl}">
            <fileset dir="${dist.temp}"
                     includes="${src}/**"/>
        </copy>
        <copy todir="${dist.temp}/${jep-ext-gpl}">
            <fileset dir="."
                     includes="${build}/**, ${dist}/${ext-jar}, LICENSE-gpl.txt"/>
        </copy>

        <zip zipfile="${dist}/${jep-ext-gpl}.zip" basedir="${dist.temp}" includes="${jep-ext-gpl}/**"/>

        <!-- clean up temporary files
          <delete dir="${disttemp}" />-->
    </target>
</project>

